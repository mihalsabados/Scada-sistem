//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RealTimeUnit.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRealTimeUnit", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRealTimeUnit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/RealTimeUnitInit", ReplyAction="http://tempuri.org/IRealTimeUnit/RealTimeUnitInitResponse")]
        int RealTimeUnitInit(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/RealTimeUnitInit", ReplyAction="http://tempuri.org/IRealTimeUnit/RealTimeUnitInitResponse")]
        System.Threading.Tasks.Task<int> RealTimeUnitInitAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/SetPublicKey", ReplyAction="http://tempuri.org/IRealTimeUnit/SetPublicKeyResponse")]
        void SetPublicKey(string keyPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/SetPublicKey", ReplyAction="http://tempuri.org/IRealTimeUnit/SetPublicKeyResponse")]
        System.Threading.Tasks.Task SetPublicKeyAsync(string keyPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/SetValue", ReplyAction="http://tempuri.org/IRealTimeUnit/SetValueResponse")]
        void SetValue(string message, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/SetValue", ReplyAction="http://tempuri.org/IRealTimeUnit/SetValueResponse")]
        System.Threading.Tasks.Task SetValueAsync(string message, byte[] signature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeUnitChannel : RealTimeUnit.ServiceReference.IRealTimeUnit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeUnitClient : System.ServiceModel.ClientBase<RealTimeUnit.ServiceReference.IRealTimeUnit>, RealTimeUnit.ServiceReference.IRealTimeUnit {
        
        public RealTimeUnitClient() {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int RealTimeUnitInit(string address) {
            return base.Channel.RealTimeUnitInit(address);
        }
        
        public System.Threading.Tasks.Task<int> RealTimeUnitInitAsync(string address) {
            return base.Channel.RealTimeUnitInitAsync(address);
        }
        
        public void SetPublicKey(string keyPath) {
            base.Channel.SetPublicKey(keyPath);
        }
        
        public System.Threading.Tasks.Task SetPublicKeyAsync(string keyPath) {
            return base.Channel.SetPublicKeyAsync(keyPath);
        }
        
        public void SetValue(string message, byte[] signature) {
            base.Channel.SetValue(message, signature);
        }
        
        public System.Threading.Tasks.Task SetValueAsync(string message, byte[] signature) {
            return base.Channel.SetValueAsync(message, signature);
        }
    }
}
